module Problem12 where
import Data.Maybe
import Data.List
 

{--
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
--}

triangleNumber n = n * (n + 1) `div` 2

triangleNumbers :: [Integer]
triangleNumbers = map triangleNumber [1..]

primes :: [Integer]
primes = sieve [2..]
 where
  sieve (p:xs) = p : (sieve $ filter (\x -> x `mod` p /= 0) xs)


primeDividers :: Integer -> [Integer]
primeDividers n = nub $ primeDividers' n primes
                  where primeDividers' n primes@(x:xs) = 
                          if n == 1 then []
                          else if n `mod` x == 0 
                                    then x : primeDividers' (n `div` x) primes
                                    else primeDividers' n xs


dividersCount :: Integer -> Int
dividersCount n = product $ map (\x -> countPower 1 n x) $ primeDividers n
                  where 
                    countPower acc n x = if n `mod` x == 0 then countPower (1 + acc) (n `div` x) x
                                                           else acc

maxDivsCount = 500


answer =  fromJust $ find overDivsCount triangleNumbers
          where overDivsCount n = dividersCount n > maxDivsCount


main = do putStrLn $ show $ answer




